#!/usr/bin/env ruby

unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

require 'rubygems'
require 'bundler/setup'
require 'aws-sdk'
require 'securerandom'
require 'json'
require 'cfnpp/transform'
require 'cfnpp/uploader'
require 'awesome_print'
require 'yaml'
require 'dogapi'
require 'ploy/yamlreader'
require 'optparse'

def main()
  usage = <<eot
  Usage: ./launch create|update|print STACK_TYPE ENVIRONMENT_TYPE [ENVIRONMENT_NAME]
    STACK_TYPE found in stacks, i.e manta-site
    ENVIRONMENT_TYPE is e.g. smoketest, used as a key into configuration
    ENVIRONMENT_NAME is your unique name, i.e stsmith
  Launch a cloudformation template.
eot

  cli_opts = {}
  optparse = OptionParser.new do|opts|
    opts.on('-h', '--help', 'Display this screen') do
      puts usage
      exit
    end
    opts.on('-d', '--deployconfig URL', 'stackhub URL for deployconfig') do |url|
      cli_opts[:deployconfig] = url
    end
    opts.on('-F', '--force', 'Force stack update and disable cancel-bad-rolling-updates from executing. (Affects only this update)') do |url|
      cli_opts[:force] = 1
    end
    opts.on('-b', '--basepath PATH', 'base path for stacks; defaults to ./stacks') do |basepath|
      cli_opts[:basepath] = basepath
    end
    opts.on('-f', '--file PATH', 'use PATH instead of $basepath/main.yml for main template') do |filepath|
      cli_opts[:filepath] = filepath
    end
    opts.on('-c', '--conf PATH', 'use PATH instead of $basepath/conf/$environment_type for conf file') do |confpath|
      cli_opts[:confpath] = confpath
    end
    opts.on('--git-revision-check', "skip update when the stack's current revision matches the new revision") do |revision|
      cli_opts[:git_revision_check] = revision
    end
  end
  optparse.parse!

  if cli_opts[:deployconfig]
    yr = Ploy::YamlReader.new
    conf = yr.from_http(cli_opts[:deployconfig])
    if (conf['locked'])
      puts "skipping autoupdate: deployconfig is locked"
      exit
    end
    unless (conf['stack_autoupdate'])
      puts "skipping autoupdate: autoupdate is false"
      exit
    end
  end

  whoami = `whoami`
  whoami.chomp!
  
  case whoami
  when "judd"
     whoami="jmontgomery"
  when "juddmontgomery"
     whoami="jmontgomery"
  end

  basepath = cli_opts[:basepath] || "stacks"
  
  action = ARGV.shift
  stack_type = ARGV.shift
  template_path = "#{basepath}/#{stack_type}/main.yml"
  template_path = cli_opts[:filepath] if cli_opts[:filepath]
  environment_type = ARGV.shift
  environment_name = ARGV.shift || whoami
  
  cfn = AWS::CloudFormation.new
  stack_name = "#{stack_type}--#{environment_name}--#{environment_type}"
  conf_path = cli_opts[:confpath] || "#{basepath}/#{stack_type}/conf/#{environment_type}.yml"

  stack = cfn.stacks[stack_name]
  if stack.exists?
    status = stack.status
    if status =~ /_IN_PROGRESS$/
      puts "can't update stack (#{stack_name}) while status is (#{status})"
      exit 0
    end
  end
 
  allowed_actions = ['create', 'update', 'print', 'validate'] 
  if !action || !allowed_actions.include?(action) || !template_path || !File.file?(template_path) || !File.file?(conf_path)
    if action && ! allowed_actions.include?(action)
      puts "unknown action (#{action})"
    end
  
    if conf_path
      if conf_path && !File.file?(conf_path)
        puts "ERROR: file (#{conf_path}) not found for stack (#{environment_type})"
      end
    end
  
    if stack_type
      if template_path && !File.file?(template_path)
        puts "ERROR: file (#{template_path}) not found for stack (#{stack_type})"
      end
    end
  
    if environment_type && !/(^smoketest$)/.match(environment_type)
      puts "ERROR: unknown environment_type (#{environment_type})"
    end
  
    puts usage
    exit 1
  end
  
  conf_yaml = File.read(conf_path)
  opts = YAML::load(conf_yaml)
  
  timestamp = Time.now.utc.strftime("%Y-%m-%dT%H.%M.%S.%LZ")
  template_info = get_template_info()
  opts['LastUpdateTimestamp'] = timestamp
  opts['TemplateGitRevision'] = template_info[:gitrev]
  opts['TemplateGitStatus'] = template_info[:gitstatus]
  opts['TemplateSource'] = template_info[:source]
  opts['LaunchInstanceId'] = template_info[:instanceid]
  opts['StackType'] = stack_type
  opts['StackName'] = stack_name
  opts['EnvironmentName'] = environment_name
  opts['EnvironmentType'] = environment_type

  opts['Force'] = 'false'
  if cli_opts[:force]
    opts['Force'] = 'true'
  end

  if cli_opts[:git_revision_check]
    ok = false
    if action == 'update' && stack.exists?
      current_revision = stack.params['TemplateGitRevision']
      puts "Checking current stack git revision (#{current_revision}) against desired revision (#{opts['TemplateGitRevsion']})"
      if current_revision != opts['TemplateGitRevision']
        ok = true
      end
    end

    unless ok
      "Skipping update for stack (#{stack_name}) because the stack's new revision (#{opts['TemplateGitRevision']}) matches the current revision"
      exit
    end
  end
 
  uploader = CfnPP::Uploader.new('manta-cloudformation', stack_name)

  template_result = CfnPP::Transform.load_file(template_path, opts, "main", "https://manta-cloudformation.s3.amazonaws.com/#{uploader.s3_path}") 

  if action == "print" #hack. TODO: dispatch actions sanely
    puts JSON.pretty_generate(template_result.data)
    exit 0
  end

  upload_results = do_upload(uploader, template_result, opts)

  if action == 'validate'
    puts 'uploading and validating only; no updates applied'
    exit 0
  end

  if action == 'create'
    puts "creating stack (#{stack_name}) from template (#{template_path}) with config (#{conf_path})"
    stack = cfn.stacks.create(stack_name,
                              upload_results[:url],
                              :parameters => upload_results[:opts_parameters],
                              :capabilities => ['CAPABILITY_IAM'])
  end
  
  if action ==  'update'
    current_resource_count = 0
    current_resource_count = stack.resources.count()
    stack.resources.each_batch do |batch|
      current_resource_count += batch.count
    end
    puts "updating stack (#{stack_name}) from template (#{template_path}) with config (#{conf_path})"
    puts "stack currently contains (#{current_resource_count}) resources"

    # Send an event to Datadog:
    # disabled while decoupling cfnpp; TODO: enable
    if false
      api_key = ''
      dog = Dogapi::Client.new(api_key)
      dd_event_title = "stack update"
      dd_event_text = "#{stack_name} stack was updated by #{whoami}"
      dd_event_tags = "deployment, stackname:#{stack_name}"
      dog.emit_event(Dogapi::Event.new("#{dd_event_text}", :msg_title => "#{dd_event_title}", :tags => "#{dd_event_tags}"))
    end

    # Update the stack
    stack.update(:template => upload_results[:url],
                         :parameters => upload_results[:opts_parameters],
                         :capabilities => ['CAPABILITY_IAM'])
  end
  
  after_update(stack, timestamp)
end

def do_upload(uploader, template_result, opts)

  template_result.substacks.each do |substack_result|
    do_upload(uploader, substack_result, opts)
  end

  upload_res = uploader.upload_template(template_result, opts)

  if upload_res[:error]
    puts "error for #{upload_res[:url]}"
    if upload_res[:error] == 'validation_error'
      vs = upload_res[:validation_status]
      puts "validation error code: #{vs[:code]}"
      puts "validation error message: #{vs[:message]}"
    elsif upload_res[:error] == 'already_updated'
      prev_opts = upload_res[:prev_opts]
      last_update_timestamp = prev_opts['LastUpdateTimestamp']
      template_git_revision = prev_opts['TemplateGitRevision']
      instanceid = prev_opts['LaunchInstanceId']
      puts "Update to git revision #{template_git_revision} already attempted at #{last_update_timestamp} from instance (#{instanceid})."
    end
    exit 1
  else
    puts "uploaded #{upload_res[:url]}"
  end

  return upload_res

end

def after_update(stack, timestamp)
  stack_name = stack.name
  #cmd = "watch -n 10 cfn-describe-stack-events #{stack_name}"
  #cmd = "watch -n 10 bin/get_stack_events.rb #{stack_name}"
  #puts cmd
  if STDIN.tty? && STDOUT.tty?
    puts "STDIN and STDOUT are ttys!"
    
    begin
      stackEvents = Set.new()
      while true
        get_stack_events( stack.name).reverse_each do |event|
          if stackEvents.add?( event)
            puts event
          end
        end
        get_sub_stacks( stack.name).each do |stack|
          get_stack_events( stack).reverse.each do |event|
            if stackEvents.add?(event)
              puts "NESTED: #{event}"
            end
          end
        end
        sleep 5
      end
    rescue SystemExit, Interrupt
      exit 0
    end
  end
  
  # This is all working, tested code, just not sure it belongs here. --stsmith
  #stack_timestamp = ''
  #status = ''
  #begin
  #  loop do
  #    # During an in-progress update, the parameters report the new values.
  #    # If rollback happens, the parameters revert to their previous values.
  #    # This behavior makes sense and is helpful.
  #    stack_timestamp = stack.parameters['LastUpdateTimestamp']
  #    status = stack.status
  #    puts "#{stack_name} #{status} #{stack_timestamp}"
  #    break unless status =~ /(CREATE|UPDATE)_IN_PROGRESS$/ && stack_timestamp == timestamp
  #    sleep 5
  #  end
  #
  #rescue AWS::CloudFormation::Errors::Throttling
  #  puts "API request throttled."
  #  retry
  #end
  #
  #exit_status = 1
  #if status =~ /(CREATE|UPDATE)_COMPLETE/ && stack_timestamp == timestamp
  #    exit_status = 0
  #end
  #exit exit_status
end

def get_sub_stacks( stack_name)
  stacks = Array.new()
  AWS.memoize do
    cfm = AWS::CloudFormation.new()
    stack = cfm.stacks[stack_name]
    stack.resource_summaries.each do |resource|
      if resource[:resource_type] == 'AWS::CloudFormation::Stack'
        if resource[:physical_resource_id].is_a? String
          stacks.push( resource[:physical_resource_id] )
        end
      end
    end
  end
  return stacks
end

def get_stack_events( stack_name)

  events = Array.new()

	AWS.memoize do
	  cfm = AWS::CloudFormation.new()
	  stack = cfm.stacks[stack_name]
	
	  table = {
	    'columns' => [ 'timestamp', 'resource_type', 'logical_resource_id', 'resource_status', 'resource_status_reason' ],
	    'column_maxlengths' => {},
	    'rows' => []
	  }
	
	  stack.events.each do |event|
	    row = {}
	    table['columns'].each do |column_name|
	      maxlength = table['column_maxlengths'][column_name] || 0
	      value = sprintf("%s", event.send(column_name))
	      row[column_name] = value
	      maxlength = (value.length > maxlength) ? value.length : maxlength
	      table['column_maxlengths'][column_name] = maxlength
	    end
	    table['rows'].push(row)
	  end
	
	  header_row = {}
	  table['columns'].each do |column_name|
	    header_row[column_name] = column_name
	  end
	
	  table['rows'].unshift(header_row)
	  table['rows'].each do |row|
	    row_text = ''
	    last_column_name = table['columns'].last
	    table['columns'].each do |column_name|
	      if column_name != last_column_name
	        maxlength = table['column_maxlengths'][column_name] || 0
	        row_text += sprintf("%-*s", maxlength, row[column_name])
	        row_text += ' '
	      else
	        row_text += sprintf("%s", row[column_name])
	      end
	    end
	    #puts row_text
      events.push( row_text)
	  end
	end
  return events
end


def get_template_info()
  gitrev = ''
  gitstatus = ''
  source = '' # ploy or git
  
  pwd = Dir.pwd

  # Try from ploy package.
  package = `dpkg -S #{pwd} 2>/dev/null`
  if package && package =~ /^cloudformation-tools:/
    gitrev = `dpkg-query -W -f='${gitrev}' cloudformation-tools`
  end

  #If stin and stdout or tty then someone is running this from command line.
  if STDIN.tty? && STDOUT.tty?
    source = 'cmd'
  else
    source = 'ploy'
  end

  # Try from git.
  if gitrev == ''
    gitrev = `/usr/bin/git log --format='%H' -n 1`
    gitrev.chomp!
    if gitrev
      source = 'git'
      gitstatus = `git status --porcelain`
    end
  end

  instanceid = `/bin/netcat 169.254.169.254 80 -w 1 -q 0 </dev/null && /usr/bin/ec2metadata --instance-id`
  instanceid.chomp!

  template = {
    :gitrev => gitrev,
    :gitstatus => gitstatus,
    :source => source,
    :instanceid => instanceid
  }
end

main()
